name: Ubuntu Build and Test All Tags

on:
  push:
    paths-ignore:
      - 'doc/**'
      - 'docker/**'
      - 'traces/**'
      - '.vscode/**'
  pull_request:
    paths-ignore:
      - 'doc/**'
      - 'docker/**'
      - 'traces/**'
      - '.vscode/**'
  workflow_dispatch:

jobs:
  ubuntu-make:
    runs-on: ubuntu-latest
    env:
      artifacts_dir: "../artifacts"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取所有 tags 和历史记录

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Update apt repos
        run: sudo apt-get update

      - name: Install dependencies (only once)
        run: |
          sudo apt-get install -yqq make autoconf build-essential ca-certificates pkg-config \
            libreadline-dev gcc-arm-none-eabi libnewlib-dev qtbase5-dev libbz2-dev \
            liblz4-dev libbluetooth-dev libpython3-dev python3 python3-dev libpython3-all-dev \
            liblua5.4-dev liblua5.4-0 lua5.4 sed libssl-dev libgd-dev

      - name: Install Python dependencies (only once)
        run: pip install -r tools/requirements.txt

      - name: Process all tags
        run: |
          # 获取所有 tags 并按版本号排序
          tags=$(git tag --sort=-version:refname)
          
          # 创建临时目录存放所有 tag 的构建结果
          mkdir -p "$artifacts_dir"

          # 遍历每个 tag
          for tag in $tags; do
            echo "Processing tag: $tag"

            # 确保工作目录干净
            git reset --hard
            git clean -fd

            # 签出当前 tag
            git checkout "$tag"
            git submodule update --init --recursive

            # 清理上次构建
            make clean

            # 设置平台
            echo "PLATFORM=PM3OTHER" > Makefile.platform

            # 构建
            make -j$((`nproc` + 1)) recovery

            # 测试
            make check

            # 保存构建结果
            tag_artifacts="$artifacts_dir/$tag"
            mkdir -p "$tag_artifacts"
            cp -r ./* "$tag_artifacts/"
          done

          # 上传所有 tag 的构建结果
          echo "Uploading artifacts from: $artifacts_dir"
          ls -R "$artifacts_dir"
        continue-on-error: true

      - uses: actions/upload-artifact@v4
        with:
          name: ubuntu-latest-output
          path: ${{ env.artifacts_dir }} 
